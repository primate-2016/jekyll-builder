#!/usr/bin/env ruby

require 'rubygems'
require 'aws-sdk-s3'
require 'logger'

def logger
  logger = Logger.new(STDERR)
  logger.level = Logger::DEBUG
  logger
end

class S3FolderUpload
  attr_reader :folder_path, :total_files, :s3_bucket, :include_folder
  attr_accessor :files

  # Initialize the upload class
  #
  # folder_path - path to the folder that you want to upload
  # bucket - The bucket you want to upload to
  # aws_key - Your key generated by AWS defaults to the environemt setting AWS_KEY_ID
  # aws_secret - The secret generated by AWS
  # include_folder - include the root folder on the path? (default: true)
  #
  # Examples
  #   => uploader = S3FolderUpload.new("some_route/test_folder", 'your_bucket_name')
  #
  def initialize(folder_path, bucket, include_folder = true)
    Aws.config.update({
      region: ENV['AWS_REGION'],
    })

    @folder_path       = folder_path
    @files             = Dir.glob("#{folder_path}/**/*")
    @total_files       = files.length
    @connection        = Aws::S3::Resource.new
    @s3_bucket         = @connection.bucket(bucket)
    @include_folder    = include_folder
  end

  # public: Upload files from the folder to S3
  #
  # thread_count - How many threads you want to use (defaults to 5)
  # simulate - Don't perform upload, just simulate it (default: false)
  # verbose - Verbose info (default: false)  
  #
  # Examples
  #   => uploader.upload!(20)
  #     true
  #   => uploader.upload!
  #     true
  #
  # Returns true when finished the process
  def upload!(thread_count = 5, simulate = false, verbose = false)
    file_number = 0
    mutex       = Mutex.new
    threads     = []

    logger.debug { "Total files: #{total_files}... uploading (folder #{folder_path} #{include_folder ? '' : 'not '}included)" }

    thread_count.times do |i|
      threads[i] = Thread.new {
        until files.empty?
          mutex.synchronize do
            file_number += 1
            Thread.current["file_number"] = file_number
          end
          file = files.pop rescue nil
          next unless file

          # Define destination path
          if include_folder
            path = file
          else
            path = file.sub(/^#{folder_path}\//, '')
          end

          logger.debug { "[#{Thread.current["file_number"]}/#{total_files}] uploading..." }
          logger.debug { "object is #{file}" }

          unless File.directory?(file) || simulate
            obj = s3_bucket.object(path)
            obj.upload_file(file)
            
          end
        end
      }
    end
    threads.each { |t| t.join }
  end
end